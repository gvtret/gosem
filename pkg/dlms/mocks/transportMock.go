// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	log "log"

	dlms "gitlab.com/circutor-library/gosem/pkg/dlms"

	mock "github.com/stretchr/testify/mock"
)

// TransportMock is an autogenerated mock type for the Transport type
type TransportMock struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *TransportMock) Close() {
	_m.Called()
}

// Connect provides a mock function with given fields:
func (_m *TransportMock) Connect() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Disconnect provides a mock function with given fields:
func (_m *TransportMock) Disconnect() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsConnected provides a mock function with given fields:
func (_m *TransportMock) IsConnected() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Send provides a mock function with given fields: src
func (_m *TransportMock) Send(src []byte) error {
	ret := _m.Called(src)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(src)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAddress provides a mock function with given fields: client, server
func (_m *TransportMock) SetAddress(client int, server int) {
	_m.Called(client, server)
}

// SetLogger provides a mock function with given fields: logger
func (_m *TransportMock) SetLogger(logger *log.Logger) {
	_m.Called(logger)
}

// SetReception provides a mock function with given fields: dc
func (_m *TransportMock) SetReception(dc dlms.DataChannel) {
	_m.Called(dc)
}

type mockConstructorTestingTNewTransportMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransportMock creates a new instance of TransportMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransportMock(t mockConstructorTestingTNewTransportMock) *TransportMock {
	mock := &TransportMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
